/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tantech.cards.search;

import com.tantech.cards.db.Card;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.SortedSetSortField;
import org.hibernate.search.jpa.FullTextEntityManager;
import org.hibernate.search.jpa.Search;
import org.hibernate.search.query.dsl.BooleanJunction;
import org.hibernate.search.query.dsl.QueryBuilder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author pfholden
 */

@Service
@Transactional

public class CardSearchService {
//    @Autowired // This means to get the bean called cardRepository
//	           // Which is auto-generated by Spring, we will use it to handle the data
//    private CardRepository cardRepository;
//    @Autowired
//    private MTGSetRepository setRepository;
//    @Autowired
//    private OwnedCardRepository ownedRepository;
    
    @PersistenceContext
    private EntityManager entityManager;
    
//    private SessionFactory sessionFactory = entityManager.unwrap(SessionFactory.class);
    
    
    
    
    public String getluceneCards(String name, String text, String type, String colors, String setname) {

//             name = "";
//             text = "";
//             type = "creature";
//             colors = "+blue+red+-green+-white+-black";
//             setname = "";

            FullTextEntityManager fullTextEntityManager 
                = Search.getFullTextEntityManager(entityManager);
            
//            Session session = sessionFactory.openSession();

            QueryBuilder queryBuilder = fullTextEntityManager.getSearchFactory() 
                .buildQueryBuilder()
                .forEntity(Card.class)
                .get();
            org.apache.lucene.search.Sort sort = new Sort(new SortedSetSortField("sortName", false));
//            Sort sort = queryBuilder.sort().byField("name").createSort();
           
            BooleanJunction mj = queryBuilder.bool();
            boolean first = true;
            if (!name.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("name").matching(name).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("name").matching(name).createQuery());
                System.out.println("Added name: "+name);
            }
            if (!text.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("text").matching(text).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("text").matching(text).createQuery());
                System.out.println("Added text: "+text);
            }
            if (!type.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("type").matching(type).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("type").matching(type).createQuery());
                System.out.println("Added type: "+type);
            }
            if (!colors.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("colors").matching(colors).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("colors").matching(colors).createQuery());
                System.out.println("Added colors: "+colors);
            }
            if (!setname.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("setname").matching(setname).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("setname").matching(setname).createQuery());
                System.out.println("Added setname: "+setname);
            }

//            Criteria crit = session.createCriteria(Test.class).setProjection(
//                Projections.distinct(Projections.projectionList()
//                .add(Projections.property("type"), "type") )
//            .setResultTransformer(Transformers.aliasToBean(YourBean.class)); 
//
//            List lst = crit.list();

//            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder().;
//            CriteriaQuery distinctQuery = criteriaBuilder.createQuery().distinct(true);
//
//            CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
//            CriteriaQuery distinctQuery = criteriaBuilder.createQuery(Card.class).distinct(true);
////            Session session = sessionFactory.getCurrentSession();
            
            
            
            org.hibernate.search.jpa.FullTextQuery jpaQuery
                = fullTextEntityManager.createFullTextQuery(mj.createQuery(), Card.class);
            
            jpaQuery.setSort(sort);
            

//            Criteria criteria = session.createCriteria(Card.class).
//                    setProjection(Projections.distinct(Projections.property("name")));
//            jpaQuery.setCriteriaQuery(criteria);
            
            List<Card> cardLst = jpaQuery.getResultList();
            
//            List<Card> uniqueCardLst = cardLst.stream().distinct().collect(Collectors.toList());
            Set<String> nameSet = new HashSet<>();
            List<Card> uniqueCardLst = cardLst.stream().filter(e -> nameSet.add(e.getName()))
                        .collect(Collectors.toList());
            
            System.out.println("");
            System.out.println("name,text,set,type,colors,mana cost,power,toughness");
            for(Card card:uniqueCardLst){
//                System.out.println("Card name: "+card.getName());
//                System.out.println("Card text: "+card.getText());
//                System.out.println("Card set: "+card.getMtgSet().getName());
//                System.out.println("Card type: "+card.getType());
//                System.out.println("Colors: "+card.getColors());
//                System.out.println("Mana cost: "+card.getManaCost());
//                System.out.println("Power/Toughness: "+card.getPower()+"/"+card.getToughness());
//                System.out.println("");
                System.out.println("\""+card.getName()+"\",\""+card.getText()+"\",\""+card.getMtgSet().getName()+"\",\""+ 
                    card.getType()+"\",\""+card.getColors()+"\","+card.getManaCost()+","+card.getPower()+","+card.getToughness());
            } 
            System.out.println("Total: "+uniqueCardLst.size());
            
            return "Search complete";
	}
    
    public String reloadIndex() throws InterruptedException {
       
        FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(entityManager);

        fullTextEntityManager.createIndexer().startAndWait();

        return "Indexing Completed";
    }
    
}
