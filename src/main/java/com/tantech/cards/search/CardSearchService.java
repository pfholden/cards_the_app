/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tantech.cards.search;

import com.tantech.cards.db.Card;
import com.tantech.cards.db.CardRepository;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.hibernate.search.jpa.FullTextEntityManager;
import org.hibernate.search.jpa.Search;
import org.hibernate.search.query.dsl.BooleanJunction;
import org.hibernate.search.query.dsl.QueryBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author pfholden
 */

@Service
@Transactional
public class CardSearchService {
    @Autowired // This means to get the bean called cardRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
    private CardRepository cardRepository;
//    @Autowired
//    private MTGSetRepository setRepository;
//    @Autowired
//    private OwnedCardRepository ownedRepository;
    @PersistenceContext
    private EntityManager entityManager;
    
//    @Autowired
//    public CardSearchService(final EntityManagerFactory entityManagerFactory) {
//        this.entityManager = entityManagerFactory.createEntityManager();
//    }
    
    public String getluceneCards(String name, String text, String type, String colors, String setname) {

//             name = "";
//             text = "";
//             type = "creature";
//             colors = "+blue+red+-green+-white+-black";
//             setname = "";

            FullTextEntityManager fullTextEntityManager 
                = Search.getFullTextEntityManager(entityManager);

            QueryBuilder queryBuilder = fullTextEntityManager.getSearchFactory() 
                .buildQueryBuilder()
                .forEntity(Card.class)
                .get();
            
            BooleanJunction mj = queryBuilder.bool();
            boolean first = true;
            if (!name.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("name").matching(name).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("name").matching(name).createQuery());
                System.out.println("Added name: "+name);
            }
            if (!text.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("text").matching(text).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("text").matching(text).createQuery());
                System.out.println("Added text: "+text);
            }
            if (!type.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("type").matching(type).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("type").matching(type).createQuery());
                System.out.println("Added type: "+type);
            }
            if (!colors.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("colors").matching(colors).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("colors").matching(colors).createQuery());
                System.out.println("Added colors: "+colors);
            }
            if (!setname.isEmpty()) {
                if (first) {
                    mj = queryBuilder.bool().must(queryBuilder.simpleQueryString()
                                    .onField("setname").matching(setname).createQuery());
                    first = false;
                }
                else mj.must(queryBuilder.simpleQueryString()
                                    .onField("setname").matching(setname).createQuery());
                System.out.println("Added setname: "+setname);
            }
            System.out.println("Query: "+mj.toString());
            
//            org.apache.lucene.search.Query query = queryBuilder
//                .simpleQueryString()
//                .onField("colors")
//                .matching("+green+blue")
//                .createQuery(); 
            
            org.hibernate.search.jpa.FullTextQuery jpaQuery
                = fullTextEntityManager.createFullTextQuery(mj.createQuery(), Card.class);
            
            List<Card> cardLst = jpaQuery.getResultList();
            
            for(Card card:cardLst){
                System.out.println("Card name: "+card.getName());
                System.out.println("Card text: "+card.getText());
                System.out.println("Card set: "+card.getMtgSet().getName());
                System.out.println("Card type: "+card.getType());
                System.out.println("Colors: "+card.getColors());
                System.out.println("");
            } 
            
            // This returns a JSON or XML with the users
            return "Search complete";
	}
    
    public String reloadIndex() throws InterruptedException {
        cardRepository.findByName("Sun Titan");
        FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager(entityManager);

        fullTextEntityManager.createIndexer().startAndWait();

        return "Indexing Completed";
    }
    
}
